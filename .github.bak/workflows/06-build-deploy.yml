name: 06 - Build & Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run preflight checks
        run: node scripts/preflight.ts

      - name: Run tests
        run: npm run test:unit

      - name: Build application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply, docker-compose, etc.
          
          # For now, just simulate deployment
          echo "âœ… Staging deployment completed"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test logic here
          sleep 30
          echo "âœ… Smoke tests passed"

      - name: Notify staging deployment
        run: |
          echo "ðŸš€ Staging deployment successful!"
          echo "Environment: staging"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for staging validation
        run: |
          echo "Waiting for staging validation..."
          # Add logic to wait for staging validation
          sleep 60

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          
          # For now, just simulate deployment
          echo "âœ… Production deployment completed"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check logic here
          sleep 30
          echo "âœ… Production health checks passed"

      - name: Notify production deployment
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "Environment: production"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Create deployment tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$(date +%Y%m%d-%H%M%S)" -m "Production deployment ${{ github.sha }}"
          git push origin --tags

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "ðŸš¨ Production deployment failed, initiating rollback..."
          # Add rollback logic here
          
          # For now, just simulate rollback
          echo "âœ… Rollback completed"
          echo "Previous stable version restored"

      - name: Notify rollback
        run: |
          echo "ðŸš¨ Rollback completed due to deployment failure"
          echo "Environment: production"
          echo "Failed commit: ${{ github.sha }}"
