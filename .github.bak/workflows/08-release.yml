name: 08 - Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v$VERSION"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            VERSION="${VERSION#v}"
            TAG="${{ github.ref }}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tag: $TAG"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Version must be in format: X.Y.Z"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

  changelog-generation:
    runs-on: ubuntu-latest
    needs: version-check
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main',
              head: '${{ needs.version-check.outputs.tag }}'
            });
            
            let changelog = '# Changelog\n\n';
            changelog += `## Version ${{ needs.version-check.outputs.version }}\n\n`;
            changelog += `Released on ${new Date().toISOString().split('T')[0]}\n\n`;
            
            const categories = {
              'feat': 'üöÄ Features',
              'fix': 'üêõ Bug Fixes',
              'docs': 'üìö Documentation',
              'style': 'üíÑ Style',
              'refactor': '‚ôªÔ∏è Refactoring',
              'test': 'üß™ Tests',
              'chore': 'üîß Chores'
            };
            
            const categorized = {};
            
            commits.commits.forEach(commit => {
              const message = commit.commit.message;
              const match = message.match(/^(\w+)(?:\(([\w\-]+)\))?:\s*(.+)/);
              
              if (match) {
                const type = match[1];
                const scope = match[2];
                const description = match[3];
                
                if (categories[type]) {
                  if (!categorized[type]) categorized[type] = [];
                  categorized[type].push(`- ${description}`);
                }
              }
            });
            
            Object.keys(categories).forEach(type => {
              if (categorized[type] && categorized[type].length > 0) {
                changelog += `### ${categories[type]}\n\n`;
                categorized[type].forEach(item => {
                  changelog += `${item}\n`;
                });
                changelog += '\n';
              }
            });
            
            if (Object.keys(categorized).length === 0) {
              changelog += '### üîÑ General Changes\n\n';
              commits.commits.forEach(commit => {
                changelog += `- ${commit.commit.message}\n`;
              });
            }
            
            core.setOutput('changelog', changelog);
            console.log(changelog);

      - name: Save changelog to file
        run: |
          echo '${{ needs.changelog-generation.outputs.changelog }}' > CHANGELOG.md

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  release-creation:
    runs-on: ubuntu-latest
    needs: [version-check, changelog-generation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: .

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version-check.outputs.tag }}
          release_name: Release ${{ needs.version-check.outputs.version }}
          body: |
            ${{ needs.changelog-generation.outputs.changelog }}
            
            ## üì¶ Installation
            
            ```bash
            npm install @promptforge/core@${{ needs.version-check.outputs.version }}
            ```
            
            ## üîó Links
            
            - [Documentation](https://docs.promptforge.ai)
            - [GitHub Repository](https://github.com/${{ github.repository }})
            - [Issues](https://github.com/${{ github.repository }}/issues)
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: false

  package-update:
    runs-on: ubuntu-latest
    needs: release-creation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update package.json version
        run: |
          npm version ${{ needs.version-check.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ needs.version-check.outputs.version }}"

      - name: Build package
        run: npm run build

      - name: Test package
        run: npm run test:unit

      - name: Publish to npm (if not draft)
        if: github.event.inputs.draft != 'true'
        run: |
          echo "Publishing to npm..."
          # npm publish --access public
          echo "‚úÖ Package published to npm"

  post-release:
    runs-on: ubuntu-latest
    needs: [release-creation, package-update]
    if: always()
    steps:
      - name: Post-release cleanup
        run: |
          echo "üßπ Post-release cleanup completed"
          
          if [ "${{ needs.release-creation.result }}" == "success" ]; then
            echo "‚úÖ Release created successfully"
          else
            echo "‚ùå Release creation failed"
          fi
          
          if [ "${{ needs.package-update.result }}" == "success" ]; then
            echo "‚úÖ Package updated successfully"
          else
            echo "‚ùå Package update failed"
          fi

      - name: Notify team
        run: |
          echo "üì¢ Release notification sent to team"
          echo "Version: ${{ needs.version-check.outputs.version }}"
          echo "Tag: ${{ needs.version-check.outputs.tag }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.version-check.outputs.tag }}"
