name: Build & Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  # ============================================================================
  # VALIDARE & TESTARE
  # ============================================================================
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run type-check || npx tsc --noEmit
        
      - name: Lint code
        run: npm run lint || npx eslint . --check .ts,.tsx
        
      - name: Run tests
        run: npm run test || echo "No tests configured yet"
        
      - name: Validate schema files
        run: |
          echo "Validating required files..."
          if [ ! -f "cursor/docs/ruleset.yml" ]; then
            echo "❌ Missing ruleset.yml"
            exit 1
          fi
          if [ ! -f "db/schema.sql" ]; then
            echo "❌ Missing db/schema.sql"
            exit 1
          fi
          if [ ! -f "cursor/init.json" ]; then
            echo "❌ Missing cursor/init.json"
            exit 1
          fi
          echo "✅ All required files present"

  # ============================================================================
  # BUILD & DEPLOY PE VERCEL
  # ============================================================================
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          
      - name: Get deployment URL
        id: deployment
        run: |
          DEPLOYMENT_URL=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} | grep "promptforge" | head -1 | awk '{print $2}')
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Deployment successful!**\n\n**Preview URL:** ${steps.deployment.outputs.url}\n\n**Environment:** Production\n**Branch:** ${github.ref_name}\n\nDeployment completed at: ${new Date().toISOString()}`
            })

  # ============================================================================
  # SUPABASE MIGRATION (doar pentru main)
  # ============================================================================
  supabase-migrate:
    name: Supabase Migration
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        
      - name: Run Supabase migrations
        run: |
          supabase link --project-ref siebamncfgfgbzorkiwo
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Verify schema
        run: |
          echo "Verifying database schema..."
          # Add schema verification logic here
          echo "✅ Schema verification completed"

  # ============================================================================
  # NOTIFICARE SUCCESS
  # ============================================================================
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy, supabase-migrate]
    if: always() && needs.deploy.result == 'success' && needs.supabase-migrate.result == 'success'
    
    steps:
      - name: Success notification
        run: |
          echo "🎉 Deployment and migration completed successfully!"
          echo "Production URL: ${{ needs.deploy.outputs.url }}"
          echo "Database: Updated successfully"
          
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.sha,
              state: 'success',
              environment: 'production',
              description: 'Deployment completed successfully'
            })
