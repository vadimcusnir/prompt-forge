name: Security Alerts

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch:

jobs:
  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        id: npm-audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate --json > audit-report.json || true
          
          # Parse audit results
          if [ -f "audit-report.json" ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities.total // 0' audit-report.json)
            echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
            
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ùå Found $VULNERABILITIES vulnerabilities"
              echo "audit_status=failure" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ No vulnerabilities found"
              echo "audit_status=success" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è Audit report not generated"
            echo "audit_status=warning" >> $GITHUB_OUTPUT
          fi
          
      - name: Run Snyk security scan
        id: snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json
        continue-on-error: true
        
      - name: Parse Snyk results
        id: snyk-results
        run: |
          if [ -f "snyk-report.json" ]; then
            VULNERABILITIES=$(jq '.vulnerabilities | length // 0' snyk-report.json)
            echo "snyk_vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
            
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ùå Snyk found $VULNERABILITIES vulnerabilities"
              echo "snyk_status=failure" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ Snyk scan clean"
              echo "snyk_status=success" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è Snyk report not available"
            echo "snyk_status=warning" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for hardcoded secrets
        id: secrets
        run: |
          echo "Checking for hardcoded secrets..."
          
          # Check for API keys, tokens, etc.
          if grep -r "sk_live_" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Found hardcoded Stripe live keys"
            echo "secrets_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if grep -r "sk-proj-" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Found hardcoded OpenAI keys"
            echo "secrets_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if grep -r "eyJ" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md"; then
            echo "‚ùå Found hardcoded JWT tokens"
            echo "secrets_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ No hardcoded secrets found"
          echo "secrets_status=success" >> $GITHUB_OUTPUT
          
      - name: Check file permissions
        id: permissions
        run: |
          echo "Checking file permissions..."
          
          # Check for overly permissive files
          if find . -type f -perm /0111 -name "*.sh" -o -name "*.py" -o -name "*.js" | grep -v node_modules | grep -v .git; then
            echo "‚ö†Ô∏è Found executable files - reviewing permissions"
            echo "permissions_status=warning" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ File permissions are appropriate"
            echo "permissions_status=success" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # SECURITY EVALUATION
  # ============================================================================
  security-evaluation:
    name: Security Evaluation
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: Evaluate security status
        id: evaluate
        run: |
          echo "üîí Evaluating Security Status..."
          
          # Get results from previous job
          NPM_AUDIT="${{ needs.security-scan.outputs.audit_status }}"
          SNYK="${{ needs.security-scan.outputs.snyk_status }}"
          SECRETS="${{ needs.security-scan.outputs.secrets_status }}"
          PERMISSIONS="${{ needs.security-scan.outputs.permissions_status }}"
          
          # Count critical failures
          CRITICAL_FAILURES=0
          if [ "$NPM_AUDIT" = "failure" ]; then CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1)); fi
          if [ "$SNYK" = "failure" ]; then CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1)); fi
          if [ "$SECRETS" = "failure" ]; then CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1)); fi
          
          echo "critical_failures=$CRITICAL_FAILURES" >> $GITHUB_OUTPUT
          
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "üö® CRITICAL SECURITY ISSUES DETECTED - $CRITICAL_FAILURES failures"
            echo "security_status=critical" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$NPM_AUDIT" = "failure" ] || [ "$SNYK" = "failure" ]; then
            echo "‚ö†Ô∏è Security vulnerabilities detected - review required"
            echo "security_status=warning" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Security scan passed - no critical issues"
            echo "security_status=success" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # BLOCK DEPLOYMENT
  # ============================================================================
  block-deployment:
    name: Block Deployment
    runs-on: ubuntu-latest
    needs: [security-scan, security-evaluation]
    if: needs.security-evaluation.result == 'failure'
    
    steps:
      - name: Block deployment
        uses: actions/github-script@v7
        with:
          script: |
            // Add security blocking label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue?.number || 0,
              labels: ['üö´ security-blocked', 'üö® critical-security']
            });
            
            // Create security issue
            const securityIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® CRITICAL: Security Vulnerabilities Detected',
              body: `## üö® Security Alert - Deployment Blocked
              
              **Status:** üö´ DEPLOYMENT BLOCKED
              **Severity:** CRITICAL
              **Trigger:** Security scan failure
              
              **Details:**
              - NPM Audit: ${{ needs.security-scan.outputs.audit_status }}
              - Snyk Scan: ${{ needs.security-scan.outputs.snyk_status }}
              - Secrets Check: ${{ needs.security-scan.outputs.secrets_status }}
              - Permissions: ${{ needs.security-scan.outputs.permissions_status }}
              
              **Action Required:**
              1. üîí Review security vulnerabilities
              2. üõ†Ô∏è Fix critical issues
              3. ‚úÖ Re-run security scan
              4. üöÄ Resume deployment
              
              **Security Team:** @security-team
              **Priority:** IMMEDIATE
              
              ---
              *Automated by PROMPTFORGE Security Alerts*
              `,
              labels: ['security', 'critical', 'deployment-blocked', 'automated']
            });
            
            console.log(`Security issue created: ${securityIssue.data.html_url}`);

  # ============================================================================
  # SECURITY TEAM NOTIFICATION
  # ============================================================================
  security-notification:
    name: Security Team Notification
    runs-on: ubuntu-latest
    needs: [security-scan, security-evaluation]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: needs.security-evaluation.result == 'failure'
        with:
          status: ${{ job.status }}
          channel: '#security-alerts'
          text: |
            üö® PROMPTFORGE Security Alert
            
            **Status:** CRITICAL SECURITY ISSUES DETECTED
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            
            **Vulnerabilities:**
            - NPM Audit: ${{ needs.security-scan.outputs.audit_status }}
            - Snyk Scan: ${{ needs.security-scan.outputs.snyk_status }}
            - Secrets Check: ${{ needs.security-scan.outputs.secrets_status }}
            
            **Action Required:** IMMEDIATE REVIEW
            **Deployment:** üö´ BLOCKED
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Create security report
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const securityStatus = '${{ needs.security-evaluation.result }}';
            const npmAudit = '${{ needs.security-scan.outputs.audit_status }}';
            const snyk = '${{ needs.security-scan.outputs.snyk_status }}';
            const secrets = '${{ needs.security-scan.outputs.secrets_status }}';
            const permissions = '${{ needs.security-scan.outputs.permissions_status }}';
            
            const body = `## üîí Security Scan Report
            
            **Status:** ${securityStatus === 'success' ? '‚úÖ SECURE' : securityStatus === 'warning' ? '‚ö†Ô∏è WARNING' : 'üö® CRITICAL'}
            
            **Scan Results:**
            - **NPM Audit:** ${npmAudit === 'success' ? '‚úÖ' : npmAudit === 'failure' ? '‚ùå' : '‚ö†Ô∏è'} ${npmAudit}
            - **Snyk Scan:** ${snyk === 'success' ? '‚úÖ' : snyk === 'failure' ? '‚ùå' : '‚ö†Ô∏è'} ${snyk}
            - **Secrets Check:** ${secrets === 'success' ? '‚úÖ' : secrets === 'failure' ? '‚ùå' : '‚ö†Ô∏è'} ${secrets}
            - **File Permissions:** ${permissions === 'success' ? '‚úÖ' : permissions === 'warning' ? '‚ö†Ô∏è' : '‚ùå'} ${permissions}
            
            **Deployment Status:** ${securityStatus === 'success' ? '‚úÖ ALLOWED' : 'üö´ BLOCKED'}
            
            **Timestamp:** ${new Date().toISOString()}
            **Run ID:** ${{ github.run_id }}
            
            ---
            *Automated by PROMPTFORGE Security Alerts*
            `;
            
            // Add comment to PR if exists
            if (context.issue?.number) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
            
            // Create security issue for critical failures
            if (securityStatus === 'failure') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Security Scan Failed - Action Required',
                body: body,
                labels: ['security', 'automated', 'scan-failed']
              });
            }

  # ============================================================================
  # AUTOMATIC ROLLBACK
  # ============================================================================
  auto-rollback:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [security-scan, security-evaluation]
    if: needs.security-evaluation.result == 'failure' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get last successful commit
        id: last-successful
        run: |
          # Find last successful deployment
          LAST_SUCCESSFUL=$(git log --oneline --grep="‚úÖ Deploy successful" -1 --format="%H" || git rev-parse HEAD~1)
          echo "last_successful=$LAST_SUCCESSFUL" >> $GITHUB_OUTPUT
          
      - name: Create rollback PR
        uses: actions/github-script@v7
        with:
          script: |
            const lastSuccessful = '${{ steps.last-successful.outputs.last_successful }}';
            
            const body = `## üö® EMERGENCY ROLLBACK
            
            **Reason:** Critical security vulnerabilities detected
            **Action:** Automatic rollback to last secure commit
            **Target:** ${lastSuccessful}
            
            **Security Issues:**
            - NPM Audit: ${{ needs.security-scan.outputs.audit_status }}
            - Snyk Scan: ${{ needs.security-scan.outputs.snyk_status }}
            - Secrets Check: ${{ needs.security-scan.outputs.secrets_status }}
            
            **‚ö†Ô∏è URGENT:** This rollback must be reviewed and merged immediately.
            
            **Next Steps:**
            1. Review security vulnerabilities
            2. Fix critical issues
            3. Re-deploy with security fixes
            4. Resume normal operations
            
            ---
            *Automated by PROMPTFORGE Security Alerts*
            `;
            
            // Create rollback PR
            const rollbackPR = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® EMERGENCY: Security Rollback Required',
              body: body,
              head: `security-rollback-${Date.now()}`,
              base: 'main'
            });
            
            console.log(`Rollback PR created: ${rollbackPR.data.html_url}`);
            
            // Add critical labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: rollbackPR.data.number,
              labels: ['üö® emergency', 'security', 'rollback', 'critical']
            });
            
            // Request security team review
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: rollbackPR.data.number,
              reviewers: ['security-team']
            });
